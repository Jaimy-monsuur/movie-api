definitions:
  dtos.CreateMovie:
    properties:
      actors:
        type: string
      director:
        type: string
      language:
        type: string
      length:
        type: integer
      plot:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  dtos.CreateReviewDto:
    properties:
      movieId:
        type: string
      movieName:
        type: string
      rating:
        type: number
      review:
        type: string
      userId:
        type: string
      userName:
        type: string
    required:
    - movieId
    - movieName
    - rating
    - review
    - userId
    - userName
    type: object
  dtos.CreateUserDto:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        minLength: 6
        type: string
      userName:
        type: string
    required:
    - email
    - firstName
    - lastName
    - password
    - userName
    type: object
  dtos.FailedResponseDto:
    properties:
      error:
        type: string
      errorType:
        type: string
      statusCode:
        type: integer
      statusText:
        type: string
    type: object
  dtos.LoginUserDto:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  dtos.SuccessResponseDto:
    properties:
      data: {}
      message:
        type: string
      statusCode:
        type: integer
      statusText:
        type: string
    type: object
  dtos.UpdateMovie:
    properties:
      actors:
        type: string
      director:
        type: string
      id:
        type: integer
      language:
        type: string
      length:
        type: integer
      plot:
        type: string
      title:
        type: string
      year:
        type: integer
    type: object
  dtos.UpdateReviewDto:
    properties:
      movieId:
        type: string
      rating:
        type: number
      review:
        type: string
      reviewId:
        type: string
      userId:
        type: string
    required:
    - movieId
    - rating
    - review
    - reviewId
    - userId
    type: object
  dtos.UpdateUserDto:
    properties:
      firstName:
        type: string
      lastName:
        type: string
    required:
    - firstName
    - lastName
    type: object
  models.Movie:
    properties:
      actors:
        type: string
      avgrating:
        type: number
      createdAt:
        type: string
      director:
        type: string
      id:
        type: string
      language:
        type: string
      length:
        type: integer
      nrOfRatings:
        type: integer
      plot:
        type: string
      reviews:
        items:
          $ref: '#/definitions/models.Review'
        type: array
      title:
        type: string
      updatedAt:
        type: string
      year:
        type: integer
    type: object
  models.Review:
    properties:
      content:
        type: string
      createdAt:
        type: string
      id:
        type: string
      movie:
        $ref: '#/definitions/models.Movie'
      movieID:
        type: string
      rating:
        type: number
      updatedAt:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: string
      lastLogin:
        type: string
      lastName:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userName:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login user
      parameters:
      - description: User Login Credentials JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.LoginUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: login successful
          schema:
            $ref: '#/definitions/dtos.SuccessResponseDto'
        "400":
          description: request body validation errors
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - BasicAuth: []
      summary: login user with valid email and password combination
      tags:
      - Auth
  /movies:
    get:
      consumes:
      - application/json
      description: Get all movies
      produces:
      - application/json
      responses:
        "200":
          description: all movies returned
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Movie'
                  type: array
              type: object
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: Get all movies
      tags:
      - Movie
    post:
      consumes:
      - application/json
      description: Create a movie
      parameters:
      - description: New Movie Details JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateMovie'
      produces:
      - application/json
      responses:
        "201":
          description: movie created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "400":
          description: request body validation error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "409":
          description: movie with supplied title already exists
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      summary: Create a movie
      tags:
      - Movie
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: movie deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "404":
          description: movie not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: Delete a movie
      tags:
      - Movie
    get:
      consumes:
      - application/json
      description: Get a movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: movie returned
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "404":
          description: movie not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: Get a movie
      tags:
      - Movie
    put:
      consumes:
      - application/json
      description: Update a movie
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Movie Details JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateMovie'
      produces:
      - application/json
      responses:
        "200":
          description: movie updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Movie'
              type: object
        "400":
          description: request body validation error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "404":
          description: movie not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "409":
          description: movie with supplied title already exists
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: Update a movie
      tags:
      - Movie
  /reviews:
    post:
      consumes:
      - application/json
      description: Create a review
      parameters:
      - description: New Review Details JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateReviewDto'
      produces:
      - application/json
      responses:
        "201":
          description: review created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Review'
              type: object
        "400":
          description: request body validation error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "409":
          description: review with supplied title already exists
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      summary: Create a review
      tags:
      - Review
  /reviews/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a review
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: review deleted successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Review'
              type: object
        "404":
          description: review not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      summary: Delete a review
      tags:
      - Review
    get:
      consumes:
      - application/json
      description: Get a review by movie id
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: review returned
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Review'
              type: object
        "404":
          description: review not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      summary: Get a review by movie id
      tags:
      - Review
    put:
      consumes:
      - application/json
      description: Update a review
      parameters:
      - description: Review ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Review Details JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateReviewDto'
      produces:
      - application/json
      responses:
        "200":
          description: review updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.Review'
              type: object
        "400":
          description: request body validation error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "404":
          description: review not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      summary: Update a review
      tags:
      - Review
  /users:
    get:
      consumes:
      - application/json
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: all users returned
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "400":
          description: token not passed with request
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "401":
          description: invalid/expired token
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: returns all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: create user
      parameters:
      - description: New User Details JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: user created successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: request body validation error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "409":
          description: another user with supplied email exists
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      summary: registers a new user
      tags:
      - User
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: delete user
      parameters:
      - description: User ID(UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: user deleted suuceesfully
          schema:
            $ref: '#/definitions/dtos.SuccessResponseDto'
        "400":
          description: request param validation error or token not passed with request
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "401":
          description: invalid/expired token
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: deletes a user
      tags:
      - User
    get:
      consumes:
      - application/json
      description: get user by ID
      parameters:
      - description: User ID(UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: desc
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: request param validation error or token not passed with request
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "401":
          description: invalid/expired token
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "404":
          description: user with the specified ID not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: returns a user by its 16 caharcter uuid
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: update user
      parameters:
      - description: User ID(UUID)
        in: path
        name: id
        required: true
        type: string
      - description: User Details JSON
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: user updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/dtos.SuccessResponseDto'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: request body/param validation error or token not passed with
            request
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "401":
          description: invalid/expired token
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "404":
          description: user with specified ID not found
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
        "500":
          description: unexpected internal server error
          schema:
            $ref: '#/definitions/dtos.FailedResponseDto'
      security:
      - JWT: []
      summary: updates a user
      tags:
      - User
swagger: "2.0"
