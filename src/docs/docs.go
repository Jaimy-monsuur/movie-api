// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "login user with valid email and password combination",
                "parameters": [
                    {
                        "description": "User Login Credentials JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.LoginUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "login successful",
                        "schema": {
                            "$ref": "#/definitions/dtos.SuccessResponseDto"
                        }
                    },
                    "400": {
                        "description": "request body validation errors",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "401": {
                        "description": "invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        },
        "/movies": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get all movies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movie"
                ],
                "summary": "Get all movies",
                "responses": {
                    "200": {
                        "description": "all movies returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Movie"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movie"
                ],
                "summary": "Create a movie",
                "parameters": [
                    {
                        "description": "New Movie Details JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateMovie"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "movie created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request body validation error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "409": {
                        "description": "movie with supplied title already exists",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        },
        "/movies/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Get a movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movie"
                ],
                "summary": "Get a movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "movie returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "movie not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Update a movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movie"
                ],
                "summary": "Update a movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Movie Details JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateMovie"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "movie updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request body validation error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "404": {
                        "description": "movie not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "409": {
                        "description": "movie with supplied title already exists",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Delete a movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Movie"
                ],
                "summary": "Delete a movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "movie deleted successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Movie"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "movie not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        },
        "/reviews": {
            "post": {
                "description": "Create a review",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Create a review",
                "parameters": [
                    {
                        "description": "New Review Details JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateReviewDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "review created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Review"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request body validation error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "409": {
                        "description": "review with supplied title already exists",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        },
        "/reviews/{id}": {
            "get": {
                "description": "Get a review by movie id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Get a review by movie id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Movie ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "review returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Review"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "review not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a review",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Update a review",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Review Details JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateReviewDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "review updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Review"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request body validation error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "404": {
                        "description": "review not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a review",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Review"
                ],
                "summary": "Delete a review",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "review deleted successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Review"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "review not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "get all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "returns all users",
                "responses": {
                    "200": {
                        "description": "all users returned",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "token not passed with request",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "401": {
                        "description": "invalid/expired token",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "post": {
                "description": "create user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "registers a new user",
                "parameters": [
                    {
                        "description": "New User Details JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateUserDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request body validation error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "409": {
                        "description": "another user with supplied email exists",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "get user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "returns a user by its 16 caharcter uuid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID(UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "desc",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request param validation error or token not passed with request",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "401": {
                        "description": "invalid/expired token",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "404": {
                        "description": "user with the specified ID not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "delete user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "deletes a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID(UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user deleted suuceesfully",
                        "schema": {
                            "$ref": "#/definitions/dtos.SuccessResponseDto"
                        }
                    },
                    "400": {
                        "description": "request param validation error or token not passed with request",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "401": {
                        "description": "invalid/expired token",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "update user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "updates a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID(UUID)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User Details JSON",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.UpdateUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user updated successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/dtos.SuccessResponseDto"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "request body/param validation error or token not passed with request",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "401": {
                        "description": "invalid/expired token",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "404": {
                        "description": "user with specified ID not found",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    },
                    "500": {
                        "description": "unexpected internal server error",
                        "schema": {
                            "$ref": "#/definitions/dtos.FailedResponseDto"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.CreateMovie": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "string"
                },
                "director": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "plot": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dtos.CreateReviewDto": {
            "type": "object",
            "required": [
                "movieId",
                "movieName",
                "rating",
                "review",
                "userId",
                "userName"
            ],
            "properties": {
                "movieId": {
                    "type": "string"
                },
                "movieName": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "review": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "dtos.CreateUserDto": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password",
                "userName"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "dtos.FailedResponseDto": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "errorType": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                },
                "statusText": {
                    "type": "string"
                }
            }
        },
        "dtos.LoginUserDto": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "dtos.SuccessResponseDto": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "statusCode": {
                    "type": "integer"
                },
                "statusText": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateMovie": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "string"
                },
                "director": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "language": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "plot": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "dtos.UpdateReviewDto": {
            "type": "object",
            "required": [
                "movieId",
                "rating",
                "review",
                "reviewId",
                "userId"
            ],
            "properties": {
                "movieId": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "review": {
                    "type": "string"
                },
                "reviewId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "dtos.UpdateUserDto": {
            "type": "object",
            "required": [
                "firstName",
                "lastName"
            ],
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "models.Movie": {
            "type": "object",
            "properties": {
                "actors": {
                    "type": "string"
                },
                "avgrating": {
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "director": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "length": {
                    "type": "integer"
                },
                "nrOfRatings": {
                    "type": "integer"
                },
                "plot": {
                    "type": "string"
                },
                "reviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Review"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "models.Review": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "movie": {
                    "$ref": "#/definitions/models.Movie"
                },
                "movieID": {
                    "type": "string"
                },
                "rating": {
                    "type": "number"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastLogin": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
